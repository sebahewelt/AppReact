{"version":3,"sources":["Tab.js","TabList.js","TabPanel.js","UseTabs.js","Interval.js","App.js","serviceWorker.js","index.js"],"names":["TabWrapper","styled","div","_templateObject","props","checked","Tab","_ref","label","index","setActiveTab","setLol","children","react_default","a","createElement","onClick","tabs","TabLIstDiv","TabList_templateObject","TabList","defaultActiveTab","activeTab","setTab","_useState","useState","_useState2","Object","slicedToArray","map","tab","src_Tab","key","concat","TabPanel","name","UseTab","src_TabList","src_TabPanel","Interval","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","number","myRefDiv","React","createRef","_this2","intervalUID","setInterval","console","log","current","setState","clearInterval","ref","Component","App","shouldShowInterval","setShowInterval","className","UseTabs","Interval_Interval","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed1536bf.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Tab = ({ checked, label, index, setActiveTab, setLol, children}) => {\n    return (\n        <TabWrapper\n            checked={checked}\n            onClick={() => setActiveTab(index)}\n        >\n            {label}\n        </TabWrapper>\n    )\n}\n\nconst TabWrapper = styled.div`\n    padding: 2px 8px;\n    font-size: 13px;\n    background-color: ${props => props.checked ? 'blue' : '#eee'};\n`;\n\nexport default Tab;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Tab from './Tab';\n\nconst tabs = [{\n    label: 'Sport'\n}, {\n    label: 'Polityka'\n}, {\n    label: 'Gospodarka'\n}];\n\n\nconst TabList = ({\n    activeTab: defaultActiveTab,\n    setActiveTab: setTab\n}) => {\n    const [activeTab, setActiveTab] = useState(defaultActiveTab);\n\n    return (\n        <TabLIstDiv>\n            {tabs.map((tab, index) => (\n                <Tab\n                    key={`tablist-${index}`}\n                    label={tab.label}\n                    checked={activeTab === index}\n                    index={index}\n                    setActiveTab={index => {setActiveTab(index); setTab(index);}}\n                />\n            ))}\n        </TabLIstDiv>\n    );\n}\n\nconst TabLIstDiv = styled.div`\n    display: flex;\n`;\n\nexport default TabList;\n","import React from 'react';\n\n\nconst TabPanel = ({ name }) => {\n    return (<div>{name}</div>)\n}\n\nexport default TabPanel;\n","import React, { useState } from 'react'\nimport TabList from './TabList'\nimport TabPanel from './TabPanel'\n\nconst UseTab = () => {\n    const [activeTab, setActiveTab] = useState(0);\n    return (\n        <div>\n            <TabList\n                setActiveTab={setActiveTab}\n                activeTab={activeTab}\n            />\n            {activeTab === 1 && <TabPanel name=\"Polityka\" />}\n            {activeTab === 2 && <TabPanel name=\"Gospodarka\" />}\n            {activeTab === 0 && <TabPanel name=\"Sport\" />}\n        </div>\n    );\n}\n\nexport default UseTab;\n","import React, { Component } from 'react';\n\nexport default class Interval extends Component {\n    state = {\n        number: 0\n    }\n\n    constructor() {\n        super();\n\n        this.myRefDiv = React.createRef();\n    }\n\n    componentDidMount() {\n        this.intervalUID = setInterval(() => {\n            console.log(this.myRefDiv.current);\n            this.setState({\n                number: this.state.number + 1\n            });\n        }, 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.intervalUID);\n    }\n\n    render() {\n        const { number } = this.state;\n\n        return (\n            <div ref={this.myRefDiv}>{number}</div>\n        );\n    }\n}\n","import React, { useState } from 'react';\n/* import TITLE from './constants';\nimport Pomidor from './Pomidor';\nimport Numbers from './Numbers';\nimport Text from './Text'; */\nimport UseTabs from './UseTabs';\nimport Interval from './Interval';\n\nfunction App() {\n  const [shouldShowInterval, setShowInterval] = useState(true);\n\n  return (\n    <div className=\"App\">\n      <UseTabs />\n      {shouldShowInterval && <Interval />}\n      {shouldShowInterval && (\n        <button onClick={() => setShowInterval(false)}>\n          Hide interval\n        </button>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}